def USER_SELECTION = ''
def static PROCEED_PRODUCTION = 'Proceed Production'
def static ROLLBACK_TEST = 'RollBack Test'
def static HTTP_OK_STATUS = 'HTTP/1.1 200 OK'
def CURRENT_HTTP_STATUS = ''

pipeline {
    agent any

    triggers {
        pollSCM('*/5 * * * *')
    }

    stages {

        stage('ST1 3114394F') {
            steps {
                echo 'ST1 3114394F: Environment is prepared. Start to rollout to TEST server'
            }
        }

        stage('ST2 3114394F') {
            steps {
                
                //remove any backup of old image [BKUP-TEST-image]
                sh 'docker image rm bkup-test-image -f'
                //create new backup image for TEST Server [BKUP-TEST-image]
                sh 'docker commit TESTsvr3114394F bkup-test-image'

                sh 'bolt script run 3114394F_script --targets TESTsvr3114394F.localdomain --user testsvradm --password password --no-host-key-check --run-as root'

                echo 'ST2 3114394F: TEST server is backup and updated'
            }
        }

        stage('ST3 3114394F') {
            steps {

                // Execute curl command to determine the TEST html outcome 
                sh 'curl -is http://TESTsvr3114394F.localdomain | head -n 1 > /tmp/TEST-result-file'

                // cat the status code in the html
                script {
                    CURRENT_HTTP_STATUS = sh 'cat /tmp/TEST-result-file'
                    // verify the status from cat command tallies with HTTP_OK_STATUS     
                    echo CURRENT_HTTP_STATUS
                    //if it tallies then continue

                    //else print the message and explain the Web test fails and then perform rollback test directly

                }
                
                
                echo 'ST3 3114394F: Test result for TEST server is generated: TEST-result-file'
            }
        }


}