def USER_SELECTION = ''
def static PROCEED_PRODUCTION = 'Proceed Production'
def static ROLLBACK_TEST = 'RollBack Test'

pipeline {
    agent any

    triggers {
        pollSCM('*/5 * * * *')
    }

    stages {

        stage('ST1 3114394F') {
            steps {
                echo 'ST1 3114394F: Environment is prepared. Start to rollout to TEST server'
            }
        }

        stage('ST2 3114394F') {
            steps {
                
                //remove any backup of old image [BKUP-TEST-image]
                sh 'docker image rm bkup-test-image -f'
                //create new backup image for TEST Server [BKUP-TEST-image]
                sh 'docker commit TESTsvr3114394F bkup-test-image'

                sh 'bolt script run 3114394F_script --targets TESTsvr3114394F.localdomain --user testsvradm --password password --no-host-key-check --run-as root'

                echo 'ST2 3114394F: TEST server is backup and updated'
            }
        }

        stage('ST3 3114394F') {
            steps {

                // Execute curl command to determine the TEST html outcome 
                sh 'curl -is http://TESTsvr3114394F.localdomain | head -n 1 > /tmp/TEST-result-file'

                // cat the status code in the html
                sh 'cat /tmp/TEST-result-file'
                
                echo 'ST3 3114394F: Test result for TEST server is generated: TEST-result-file'
            }
        }

        stage('ST4 3114394F') {
            steps {
                echo "ST4 3114394F: TEST server's testing result has been inspected"
                
                script {
                    USER_SELECTION = input( 
                                            message: "Proceed Production or RollBack?", 
                                            parameters: [
                                                choice(
                                                    name: 'user_choice', 
                                                    choices: [PROCEED_PRODUCTION, ROLLBACK_TEST]
                                                )
                                            ]
                                        )
                } 

            }
        }

        stage ('ST5 3114394F') {
            steps {
                
                script {
                    if (USER_SELECTION == PROCEED_PRODUCTION) {
                        //bolt script 
                        sh 'bolt script run 3114394F_script --targets PRODsvr3114394F.localdomain --user prodsvradm --password password --no-host-key-check --run-as root'
                        
                    }else if (USER_SELECTION == ROLLBACK_TEST) {

                        //stop the TESTsvr3114394F container
                        sh 'docker container stop TESTsvr3114394F'

                        //remove the container TESTsvr3114394F
                        sh 'docker container remove TESTsvr3114394F'

                    
                        //create new container for TESTsvr3114394F using the docker image 
                        sh 'docker compose --file operate-docker-container-setup/backup-test-server/testsvrbkup-docker-compose.yml up -d'

                        //clean up docker image previously attached to TESTsvr3114394F 
                        sh 'docker image prune --all --force'
                    }

                }
            }
        }

        stage ('ST6 3114394F') {
            steps {
                script {
                    if (USER_SELECTION == PROCEED_PRODUCTION){
                        echo "ST6 3114394F: Production server is updated"
                    }else if (USER_SELECTION == ROLLBACK_TEST) {
                        echo "ST6 3114394F: TEST server is rollback"
                    }
                }
            }
        }

    }
}